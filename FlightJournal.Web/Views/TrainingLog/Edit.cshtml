@using FlightJournal.Web.Views
@model FlightJournal.Web.Models.TrainingLogViewModel

<div class="tourable" data-step="1" data-intro=@Html.Raw(__("On this page, you can plan a training flight based on the current status of the pilot, and you can evaluate and grade the flight. Note that the guide only shows descriptions for currently visible elements, so you may have to open the sections you are interested in"))></div>

<div class="row no-gutter">
    <div class="col-xs-12" data-step="2" data-intro=@Html.Raw(__("Select the training program for this flight. This determines which lessons and exercises you will see below"))>
        <select class="selectpicker" id="TrainingProgram">
            @foreach (var program in Model.TrainingPrograms)
            {
                <option value="@program.Id">@program.Name</option>
            }
        </select>
    </div>
</div>
<div class="row no-gutter" data-step="3" data-intro=@Html.Raw(__("Flight info"))>
    <div class="col-xs-4 col-sm-2">
        @Model.Date
    </div>
    <div class="col-xs-4 col-sm-2">
        @Model.Pilot
    </div>
    <div class="col-xs-4 col-sm-2">
        @Model.BackseatPilot
    </div>
</div>

<div class="row no-gutter btn-group-toggle" data-toggle="buttons" >
    <label class="col-xs-2 btn btn-default traininglogstatebutton" id="lessonoverviewtoggle" data-step="4" data-intro=@Html.Raw(__("Show/hide bar-chart style overview of lessons and their completion"))><input type="checkbox"><i class="fa fa-list"></i><span class="hidden-xs  hidden-sm"> @_("Lesson progress")</span></label>
    <label class="col-xs-2 btn btn-default traininglogstatebutton" id="lessonstoggle" data-step="5" data-intro=@Html.Raw(__("Show/hide buttons to access exercises for each lesson"))><input type="checkbox"><i class="fa fa-paper-plane"></i><span class="hidden-xs hidden-sm"> @_("Lesson details")</span></label>
    <div class="col-xs-2"></div>
    <label class="col-xs-2 btn btn-default traininglogstatebutton" id="maneuverstoggle" data-step="6" data-intro=@Html.Raw(__("Show/hide selection of maneuvers done during the flight"))><input type="checkbox">&#x21B0&#x219D&infin;<span class="hidden-xs  hidden-sm"> @_("Maneuvers")</span></label>
    <label class="col-xs-2 btn btn-default traininglogstatebutton" id="annotationstoggle" data-step="7" data-intro=@Html.Raw(__("Show/hide options for grading the flight phases"))><input type="checkbox">@_("Grading")</label>
    <label class="col-xs-2 btn btn-default traininglogstatebutton" id="weathertoggle" data-step="8" data-intro=@Html.Raw(__("Show/hide options for describing the weather during the flight"))><input type="checkbox"><i class="fa fa-cloud"></i><span class="hidden-xs  hidden-sm"> @_("Weather")</span></label>
</div>

<div id="lessonsoverviewcontainer" class="table-responsive row no-gutter bordered">
    <table class="table table-condensed col-xs-12 lessonsoverviewtable" data-step="10" data-intro=@Html.Raw(__("Progress for each lesson"))>
        <tbody>
        @{
            var introDefCshown = false;
            var introDefWshown = false;
            var introDefNshown = false;
        }
        @foreach (var lesson in Model.TrainingProgram.Lessons)
        {
            var completedpct = (int) Math.Round(100.0 * lesson.ExercisesCompleted / lesson.ExercisesTotal);
            var wippct = (int) Math.Round(100.0 * lesson.ExercisesInProgress / lesson.ExercisesTotal);
            var nspct = 100 - completedpct - wippct;
            var introdefC = "";
            var introdefW = "";
            var introdefN = "";
            if (!introDefCshown && completedpct > 0)
            {
                var introTxt = Html.Raw(__("Number of completed exercises is shown in this style")).ToString();
                introdefC = $"data-step=11 data-tooltipClass=status-completed data-intro={introTxt}";
                introDefCshown = true;
            }
            if (!introDefWshown && wippct > 0)
            {
                var introTxt = Html.Raw(__("Number of exercises in progress is shown in this style")).ToString();
                introdefW = $"data-step=12 data-tooltipClass=status-in-progress data-intro={introTxt}";
                introDefWshown = true;
            }
            if (!introDefNshown && nspct > 0)
            {
                var introTxt = Html.Raw(__("Number of exercises not started yet is shown in this style")).ToString();
                introdefN = $"data-step=13 data-tooltipClass=status-not-started data-intro={introTxt}";
                introDefNshown = true;
            }
            <tr class="@Model.TrainingProgram.Id  lessondetails" data-lessonid="@lesson.Id" >
                <td style="width: 5%; line-height: 0.7;">@lesson.Name</td>
                <td class="progress" style="width: 95%; padding: 0px;">
                @if (completedpct > 0)
                {
                    <div class="progress-bar status-completed" role="progressbar" style="width: @completedpct%" @Html.Raw(introdefC)>@lesson.ExercisesCompleted</div>
                }
                @if (wippct > 0)
                {
                    <div class="progress-bar status-in-progress" role="progressbar" style="width: @wippct%;"  @Html.Raw(introdefW)> @lesson.ExercisesInProgress</div>
                }
                @if (nspct > 0)
                {
                    <div class="progress-bar status-not-started" role="progressbar" style="width: @nspct%;"  @Html.Raw(introdefN)>@lesson.ExercisesNotStarted</div>
                }
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>

<div class="row no-gutter btn-group-toggle @Model.TrainingProgram.Id lessonscontainer bordered" data-toggle="buttons" data-step="20" data-intro=@Html.Raw(__("Click a button to see the detailed exercise info and status for the lesson"))>
    @foreach (var lesson in Model.TrainingProgram.Lessons)
    {
        <label class="col-xs-2 col-sm-1 traininglogstatebutton btn btn-default @CssHelper.CssClassFor(lesson.Status)" title="@lesson.StatusSummary"><input type="checkbox" data-lessonclz="@Model.TrainingProgram.Id-@lesson.Id" class="lessontoggle">@lesson.Name</label>
    }
    <div class="col-xs-2 col-sm-1 "></div>
</div>



<div id="lessonscontainer" class="table-responsive lessonscontainer row no-gutter bordered" >
    <table class="table table-condensed col-xs-12 lessonsdetailtable" data-step="30" data-intro=@Html.Raw(__("All lessons and exercises with status"))>
        <thead>
            <tr>
                <th>@_("Lesson")</th>
                <th>@_("Exercise")</th>
                @* TODO: more grades ? *@
                <th>@_("Briefed")</th>
                <th>@_("Trained")</th>
                <th>@_("Ok")</th>
            </tr>
        </thead>
        <tbody>
        @{
            var helpIntroShown = false;
            var statusIntroShown = false;
        }
        @foreach (var lesson in Model.TrainingProgram.Lessons)
        {
            foreach (var exercise in lesson.Exercises)
            {
                var checkedBox = "<input type='checkbox' class='lessoncheckbox' checked>";
                var uncheckedBox = "<input type='checkbox' class='lessoncheckbox'>";
                var clz = CssHelper.CssClassFor(exercise.Status);
                var briefedMarker = exercise.IsBriefed ? checkedBox : uncheckedBox;
                var trainedMarker = exercise.BriefingOnlyRequired ? "." : exercise.IsTrained ? checkedBox : uncheckedBox;
                var completedMarker = exercise.BriefingOnlyRequired ? "." : exercise.IsCompleted ? checkedBox : uncheckedBox;
                var infoMarker = exercise.LongDescription.Any() ? "<span class='fa fa-info-circle'></span>" : "";
                var introdefL = "";
                var introdefX = "";
                var introdefB = "";
                var introdefT = "";
                var introdefC = "";
                if (!helpIntroShown && exercise.LongDescription.Any())
                {
                    // show lesson/exercise help on first exercise with long description
                    var introtxtL = Html.Raw(__("Click here to see a description of the lesson")).ToString();
                    introdefL = $"data-step=32 data-intro={introtxtL}";
                    var introtxtX = Html.Raw(__("Click here to see a description of the exercise (if available)")).ToString();
                    introdefX = $"data-step=33 data-intro={introtxtX}";
                    helpIntroShown = true;
                }
                else if (!statusIntroShown && !exercise.BriefingOnlyRequired)
                {   // show checkbox info on first 'fresh' exercise
                    var introtxtB = Html.Raw(__("Check this when the exercise has been briefed")).ToString();
                    introdefB = $"data-step=34 data-intro={introtxtB}";
                    var introtxtT = Html.Raw(__("Check this when the exercise has been trained but is not yet at a sufficient level")).ToString();
                    introdefT = $"data-step=35 data-intro={introtxtT}";
                    var introtxtC = Html.Raw(__("Check this when the exercise is completed")).ToString();
                    introdefC = $"data-step=36 data-intro={introtxtC}";
                    statusIntroShown = true;
                }
                <tr class="@Model.TrainingProgram.Id-@lesson.Id exercise">
                    <td class="btn-default statusbutton @clz lessondetails" data-lessonid="@lesson.Id"  @Html.Raw(introdefL)>@lesson.Name</td>
                    <td class="btn-default statusbutton @clz exercisedetails" data-exerciseid="@exercise.Id"  @Html.Raw(introdefX)>@exercise.Description @Html.Raw(infoMarker)</td>
                    <td class="btn-default statusbutton @clz" @Html.Raw(introdefB)>@Html.Raw(briefedMarker)</td>
                    <td class="btn-default statusbutton @clz" @Html.Raw(introdefT)>@Html.Raw(trainedMarker)</td>
                    <td class="btn-default statusbutton @clz" @Html.Raw(introdefC)>@Html.Raw(completedMarker)</td>
                </tr>
            }
        }
        </tbody>
    </table>
</div>

<div id="maneuverscontainer" class="row annotationcontainer bordered no-gutter" data-step="40" data-intro=@Html.Raw(@__("Select the maneuvers performed during the flight"))>
    <div class="col-xs-2  col-sm-1">@_("Maneuvers")</div>
    <select class="col-xs-10  col-sm-11 selectpicker userselection" multiple  id="maneuver-sel" title=@Html.Raw(__("Select one or more maneuvers"))>
            @foreach (var maneuver in Model.Manouvres)
        {
            var selected = Model.ThisFlight.Manouvres.Contains(maneuver.ManouvreItem.ToString()) ? "selected" : "";

                <option value="@maneuver.ManouvreId" data-icon="@maneuver.Icon">@Html.Raw(maneuver.ManouvreItem)</option>
        }
    </select>
</div>


<div id="annotationscontainer" class="annotationcontainer bordered row no-gutter" data-step="50" data-intro=@Html.Raw(__("Here you can grade, annotate, and comment the phases of the flight "))>
    <div class="col-xs-12 col-sm-12">
        <button class="btn btn-success" id="sfilok">@_("Everything ok")</button>
    </div>
    <div class="col-xs-2 col-sm-1">@_("Launch")</div>
    <select class="col-xs-10 col-sm-11 selectpicker annotation userselection" id="s-ann" multiple title=@Html.Raw(__("Grade the launch"))>
        @foreach (var annotation in Model.Annotations)
        {
            var selected = Model.ThisFlight.FlightAnnotations.Contains(annotation.ToString()) ? "selected" : "";
            <option value="@annotation.Id" data-icon="@annotation.Icon" @selected>@Html.Raw(annotation.Name)</option>
        }
    </select>
    <div class="col-xs-2 col-sm-1">@_("Flight")</div>
    <select class="col-xs-10 col-sm-11  selectpicker annotation userselection" id="s-ann" multiple title=@Html.Raw(__("Grade the flight phase between launch and approach"))>
        @foreach (var annotation in Model.Annotations)
        {
            var selected = Model.ThisFlight.FlightAnnotations.Contains(annotation.ToString()) ? "selected" : "";
            <option value="@annotation.Id" data-icon="@annotation.Icon" @selected>@Html.Raw(annotation.Name)</option>
        }
    </select>
    <div class="col-xs-2 col-sm-1">@_("Approach")</div>
    <select class="col-xs-10  col-sm-11 selectpicker annotation userselection" id="i-ann" multiple title=@Html.Raw(__("Grade the approach phase"))>
        @foreach (var annotation in Model.Annotations)
        {
            var selected = Model.ThisFlight.FlightAnnotations.Contains(annotation.ToString()) ? "selected" : "";
            <option value="@annotation.Id" data-icon="@annotation.Icon" @selected>@Html.Raw(annotation.Name)</option>
        }
    </select>
    <div class="col-xs-2 col-sm-1">@_("Landing")</div>
    <select class="col-xs-10 col-sm-11  selectpicker annotation userselection" id="l-ann" multiple title=@Html.Raw(__("Grade the landing"))>
        @foreach (var annotation in Model.Annotations)
        {
            var selected = Model.ThisFlight.FlightAnnotations.Contains(annotation.ToString()) ? "selected" : "";
            <option value="@annotation.Id" data-icon="@annotation.Icon" @selected>@Html.Raw(annotation.Name)</option>
        }
    </select>
    <div class="col-xs-2 col-sm-1">@_("Note")</div>
    <div class="col-xs-10 col-sm-11 " data-step="55" data-intro=@Html.Raw(__("If you have comments beyond the predefined selections above, you can enter them here"))>
        <textarea style="width: 100%; max-width:100%" id="flightnotes" rows="3">@Model.ThisFlight.Notes</textarea>
    </div>
</div>

<div id="weathercontainer" class="annotationcontainer bordered row no-gutter" data-step="60" data-intro=@Html.Raw(__("In case the weather has been a factor (for better or worse), you can describe it here"))>
    <div class="col-xs-2  col-sm-1">Vejr</div>
    <select class="col-xs-5 selectpicker userselection" title=@Html.Raw(__("Wind direction")) id="winddirection">
        @foreach (var v in Model.WindDirections)
        {
            <option value="@v.Value">@Html.Raw(v.Text)</option>
        }
    </select>
    <select class="col-xs-4 selectpicker userselection" title=@Html.Raw(__("Wind speed")) id="windspeed">
        @foreach (var v in Model.WindSpeeds)
        {
            <option value="@v.Value">@Html.Raw(v.Text)</option>
        }
    </select>
</div>



<div class="row" style="margin-top: 30px">
    <div class="col-md-6">
        <div class="btn-group btn-group-lg">
            <button class="btn btn-primary" id="savebtn">@_("Save")</button>
            <button class="btn btn-default" id="backbtn">@_("Back")</button>
            <button class="btn btn-default" id="showrecentflights">@_("Show last 15 flights")</button>
        </div>
    </div>
</div>


<div class="modal" tabindex="-1" role="dialog" id="exercisemodal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exercisemodaltitle">Øvelse</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p id="exercise-description"></p>

                <h4 id="exercise-precondition-header">Forudsætninger</h4>
                <p id="exercise-precondition"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="modal" tabindex="-1" role="dialog" id="recentflightsmodal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Sidste flyvninger</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="recentflightstable">
                <table class='table table-responsive table-condensed'>
                    @{
                        foreach (var flight in Model.FlightLog)
                        {
                            <tr><td>@flight.Date</td><td></td><td>Øvet</td><td>Ok - lidt slingrende</td><td></td></tr>
                        }
                    }
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@foreach (var lesson in Model.TrainingProgram.Lessons)
{
    <div class="lessondescription" id="@lesson.Id" data-header="@lesson.Name" data-description="@lesson.Description" data-precondition="@lesson.Precondition"></div>
    foreach (var exercise in lesson.Exercises)
    {
        <div class="exercisedescription" id="@exercise.Id" data-header="@exercise.Description" data-description="@exercise.LongDescription"></div>
    }
}

@section scripts
{
    <script type="text/javascript">
        $(document).ready(function() {
            $("#TrainingProgram").change(function() {
//                showRelevantTrainingProgram($(this));
//TODO: reload with new program
            });

            $(".lessontoggle").change(function() {
                showRelevantExercises($(this));
            });

            $(".exercise").hide();
            $(".lessonsdetailtable").hide();
            $(".lessonsoverviewtable").hide();

            $(".exercisedetails").click(function() {
                showInfoFromId($(this).data("exerciseid"));
            });
            $(".lessondetails").click(function() {
                showInfoFromId($(this).data("lessonid"));
            });

            $("#showrecentflights").click(function() {
                $("#recentflightsmodal").modal();
            });

            $(".lessonscontainer").hide();
            $("#annotationscontainer").hide();
            $("#maneuverscontainer").hide();
            $("#weathercontainer").hide();
            $("#lessonsoverviewcontainer").hide();


            $("#maneuverstoggle").click(function() {
                if ($(this).find("input").is(":checked"))
                    $("#maneuverscontainer").hide();
                else
                    $("#maneuverscontainer").show();
            });
            $("#annotationstoggle").click(function() {
                if ($(this).find("input").is(":checked"))
                    $("#annotationscontainer").hide();
                else
                    $("#annotationscontainer").show();
            });
            $("#weathertoggle").click(function() {
                if ($(this).find("input").is(":checked"))
                    $("#weathercontainer").hide();
                else
                    $("#weathercontainer").show();
            });
            $("#lessonoverviewtoggle").click(function() {
                if ($(this).find("input").is(":checked")) {
                    $("#lessonsoverviewcontainer").hide();
                    $(".lessonsoverviewtable").hide();
                } else {
                    $("#lessonsoverviewcontainer").show();
                    $(".lessonsoverviewtable").show();
                }
            });
            $("#lessonstoggle").click(function() {
                if ($(this).find("input").is(":checked"))
                    $(".lessonscontainer").hide();
                else
                    $(".lessonscontainer").show();
            });

            $("#sfilok").click(function() {
                $(".selectpicker.annotation").each(function() {
                    $(this).selectpicker('val', 'Ok');
                });
            });

            $("#savebtn").click(function() {
                if (!isDirty())
                    window.history.back();
                else {
                    alert(@Html.Raw(__("Saving is not implemented yet")));
                }

            });
            $("#backbtn").click(function() {
                if (!isDirty() ||
                    confirm(@Html.Raw(__("You have unsaved data - do you want to leave the page and loose the changes?")))) {
                    window.history.back();
                }
            });
        });

        var isDirty = function() {
            var hasExerciseData = $(".lessoncheckbox:checked").length > 0;
            var annotationCount = 0;
            $(".userselection").each(function() { if ($(this).val()) ++annotationCount; });
            var hasNote = $("#flightnotes").val().length > 0;
            return hasExerciseData || hasNote || annotationCount > 0;
        }

        var showRelevantExercises = function(lesson) {
            $(".lessonsdetailtable").show();
            var key = "." + lesson.data("lessonclz");
            $(key).each(function() {
                if (lesson.is(":checked"))
                    $(this).show();
                else
                    $(this).hide();
            });
            var anyLessons = $(".lessontoggle:checked").length;
            if (anyLessons)
                $(".lessonsdetailtable").show();
            else
                $(".lessonsdetailtable").hide();
        }

        @*var showRelevantTrainingProgram = function(sel) {
                <text>
                    if (sel.find(":selected").val() == "@Model.TrainingProgram.Id")
                        $(".@Model.TrainingProgram.Id").show();
                    else
                        $(".@Model.TrainingProgram.Id").hide();
                </text>
            $(".active").removeClass("active");
            $(".exercise").hide();
        }*@


        var showInfoFromId = function(infoid) {
            var info = $("#" + infoid);
            var descr = info.data("description");
            var precondition = info.data("precondition");
            var title = info.data("header");
            if (descr && descr.length) {
                $("#exercisemodaltitle").html(title);
                $("#exercise-description").html(descr);
                $("#exercise-precondition").html(precondition ? precondition : "");
                if (precondition)
                    $("#exercise-precondition-header").show();
                else
                    $("#exercise-precondition-header").hide();
                $("#exercisemodal").modal();
            }
        }


    </script>
}
